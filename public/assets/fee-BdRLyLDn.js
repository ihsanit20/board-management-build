import{N as l,O as i}from"./index-pGQr_bJm.js";const d=l("fee",{state:()=>({fees:[],fee:null,loading:!1,error:null}),actions:{async fetchFees(){var t,a;this.loading=!0;try{const e=await i.get("/fees");this.fees=e.data}catch(e){this.error=((a=(t=e.response)==null?void 0:t.data)==null?void 0:a.message)||"Failed to fetch fees"}finally{this.loading=!1}},async fetchFee(t,a={}){var e,s;this.loading=!0;try{const r=await i.get(`/fees/${t}`,{params:a});this.fee=r.data}catch(r){this.error=((s=(e=r.response)==null?void 0:e.data)==null?void 0:s.message)||"Failed to fetch fee"}finally{this.loading=!1}},async createFee(t){var a,e;this.loading=!0;try{const s=await i.post("/fees",t);this.fees.push(s.data)}catch(s){this.error=((e=(a=s.response)==null?void 0:a.data)==null?void 0:e.message)||"Failed to create fee"}finally{this.loading=!1}},async updateFee(t,a){var e,s;this.loading=!0;try{const r=await i.put(`/fees/${t}`,a),o=this.fees.findIndex(n=>n.id===t);o!==-1&&(this.fees[o]=r.data)}catch(r){this.error=((s=(e=r.response)==null?void 0:e.data)==null?void 0:s.message)||"Failed to update fee"}finally{this.loading=!1}},async deleteFee(t){var a,e;this.loading=!0;try{await i.delete(`/fees/${t}`),this.fees=this.fees.filter(s=>s.id!==t)}catch(s){this.error=((e=(a=s.response)==null?void 0:a.data)==null?void 0:e.message)||"Failed to delete fee"}finally{this.loading=!1}}}});export{d as u};
