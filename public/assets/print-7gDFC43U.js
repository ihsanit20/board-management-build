import{P as D,r as u,Q as c}from"./index-CjHXjKej.js";const b=D("print",()=>{const o=u(null),v=u(null),i=u(null),h=u([]),d=u([]),y=u([]),f=u([]),g=u([]),p=u([]),m=u(null),r=u(!1),n=u(null);return{centerId:o,zamatId:v,markSheetData:i,printEnvelopFinal:h,centerEnvelopData:y,seatNumberData:f,centerAcknowledgmentData:g,areaStudentCountData:p,summaryData:m,loading:r,error:n,printEnvelopGeneral:d,fetchPrintEnvelopGeneral:async a=>{var t,e,s;if(!a){n.value="Area ID is required.";return}r.value=!0,n.value=null,d.value=[];try{const l=await c.get("/print-envelop-general",{params:{area_id:a}});d.value=((t=l.data)==null?void 0:t.data)||[]}catch(l){n.value=((s=(e=l.response)==null?void 0:e.data)==null?void 0:s.message)||"Failed to fetch general envelop data"}finally{r.value=!1}},fetchMarkSheet:async()=>{var a,t;if(!o.value||!v.value){n.value="Center ID and Zamat ID are required.";return}i.value=null,r.value=!0,n.value=null;try{const e=await c.post("/generate-mark-sheet",{center_id:o.value,zamat_id:v.value});i.value=e.data}catch(e){n.value=((t=(a=e.response)==null?void 0:a.data)==null?void 0:t.message)||"An error occurred while fetching the mark sheet."}finally{r.value=!1}},fetchPrintEnvelopFinal:async(a=null,t=null)=>{var e,s;r.value=!0,n.value=null;try{const l={};a&&(l.area_name=a),t&&(l.institute_code=t);const w=await c.get("/print-envelop-final",{params:l});h.value=w.data}catch(l){n.value=((s=(e=l.response)==null?void 0:e.data)==null?void 0:s.message)||"Failed to fetch print envelop data"}finally{r.value=!1}},fetchCenterEnvelop:async()=>{var a,t;r.value=!0,n.value=null;try{const e=await c.get("/print-center-envelop");y.value=e.data}catch(e){n.value=((t=(a=e.response)==null?void 0:a.data)==null?void 0:t.message)||"Failed to fetch center envelop data"}finally{r.value=!1}},fetchSeatNumber:async()=>{var a,t;if(!o.value||!v.value){n.value="Center ID and Zamat ID are required.";return}r.value=!0,n.value=null,f.value=[];try{const e=await c.get("/print-seat-number",{params:{center_id:o.value,zamat_id:v.value}});f.value=e.data}catch(e){n.value=((t=(a=e.response)==null?void 0:a.data)==null?void 0:t.message)||"Failed to fetch seat number data"}finally{r.value=!1}},fetchCenterAcknowledgment:async(a=null)=>{var t,e;r.value=!0,n.value=null;try{const s={};a&&(s.department_id=a);const l=await c.get("/center-acknowledgment",{params:s});g.value=l.data}catch(s){n.value=((e=(t=s.response)==null?void 0:t.data)==null?void 0:e.message)||"Failed to fetch data"}finally{r.value=!1}},fetchAreaStudentCount:async(a,t)=>{var e,s;r.value=!0,n.value=null;try{const l=await c.get(`/area-student-count/${a}/${t}`);console.log("API Response:",l.data),l.data?p.value=l.data:p.value={}}catch(l){n.value=((s=(e=l.response)==null?void 0:e.data)==null?void 0:s.message)||l.message||"Failed to fetch area student count data"}finally{r.value=!1}},fetchExamSummary:async a=>{var t,e;if(!a){n.value="Exam ID is required.";return}r.value=!0,n.value=null,m.value=null;try{const s=await c.get(`/summary/${a}`);m.value=s.data}catch(s){n.value=((e=(t=s.response)==null?void 0:t.data)==null?void 0:e.message)||"Failed to fetch exam summary data"}finally{r.value=!1}}}});export{b as u};
